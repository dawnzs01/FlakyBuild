我提供一个网关DubboFilter的信息和代码,后续我会让你根据这些信息和代码来创建新的Filter,请你记住:

信息:
开发者:goodjava@qq.com
判断是否进入Dubbo Filter执行的逻辑:routeType == RouteType.Dubbo.type()
FilterOrder的数字是:3000
client的名字叫:dubboClient
client的类叫:Dubbo

代码:
package com.xiaomi.youpin.gateway.netty.filter.request;

import com.xiaomi.youpin.gateway.RouteType;
import com.xiaomi.youpin.gateway.common.FilterOrder;
import com.xiaomi.youpin.gateway.dubbo.Dubbo;
import com.xiaomi.youpin.gateway.filter.FilterContext;
import com.xiaomi.youpin.gateway.filter.Invoker;
import com.xiaomi.youpin.gateway.filter.RequestFilter;
import com.xiaomi.youpin.gateway.sidecar.ISideCarFilterService;
import com.xiaomi.youpin.gateway.sidecar.bo.SideCarEnum;
import com.youpin.xiaomi.tesla.bo.ApiInfo;
import io.netty.handler.codec.http.FullHttpRequest;
import io.netty.handler.codec.http.FullHttpResponse;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import static com.xiaomi.youpin.gateway.filter.FilterContext.New_Route_Type;

/**
 * @author goodjava@qq.com
 * <p>
 * dubbo协议调用
 */
@Component
@FilterOrder(3000)
@Slf4j
public class DubboFilter extends RequestFilter {

    //要使用的dubbo客户端
    @Autowired
    private Dubbo dubboClient;
    
    //如果是需要开启sidecar模式,则需要引入sidecar service
    @Autowired
    private ISideCarFilterService sideCarFilterService;

    @Override
    public FullHttpResponse doFilter(FilterContext context, Invoker invoker, ApiInfo apiInfo, FullHttpRequest request) {
        int routeType = apiInfo.getRouteType();
        //判断是否需要执行到dubbo filter
        if (routeType == RouteType.Dubbo.type() || routeType == RouteType.Native_Dubbo.type()) {
            //启用sidecar模式
            if (sideCarFilterService.supportSideCar(SideCarEnum.dubbo)) {
                return sideCarFilterService.callDubboFilterSideCar(context, apiInfo, request);
            }
            return dubboClient.call(context, apiInfo, request);
        }
        //不需要执行dubbo filter,则直接向下执行
        return invoker.doInvoker(context, apiInfo, request);
    }

}
