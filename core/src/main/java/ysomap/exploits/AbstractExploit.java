package ysomap.exploits;

import ysomap.common.exception.ArgumentsNotCompleteException;
import ysomap.common.util.Logger;
import ysomap.common.util.Status;
import ysomap.core.secmng.YsoSecurityManager;
import ysomap.core.util.ReflectionHelper;

import java.util.concurrent.Callable;

/**
 * @author wh1t3P1g
 * @since 2021/6/13
 */
public abstract class AbstractExploit implements Exploit{

    public volatile Status status = Status.INIT;
    public volatile boolean needRunning = false;

    @Override
    public void run() {
        try{
            // check args first, if not complete, throw a ArgumentsNotCompleteException
            ReflectionHelper.checkClassFieldsNotNull(this);
            // check args ok, then do the job
            Logger.success("exploit "+this.getClass().getSimpleName()+" started!");

            final Exploit exploit = this;
            YsoSecurityManager.callWrapped(new Callable<Object>() {
                @Override
                public Object call() throws Exception {
                    exploit.work();
                    return null;
                }
            }, getSecurityManager());

            if(!needRunning){
                stop();
                Logger.success("exploit "+this.getClass().getSimpleName()+" done!");
            }
        } catch (ArgumentsNotCompleteException e){
            Logger.normal(e.getMessage());
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            status = Status.STOPPED;
        }
    }

    @Override
    public void setStatus(Status status) {
        this.status = status;
    }

    @Override
    public boolean isRunning() {
        return status.equals(Status.RUNNING);
    }

    @Override
    public Exploit set(String key, Object value) throws Exception {
        return ReflectionHelper.set(this, key, value);
    }

    @Override
    public String get(String key) {
        return ReflectionHelper.get(this, key);
    }

    @Override
    public boolean has(String key) {
        return ReflectionHelper.has(this, key);
    }

    @Override
    public SecurityManager getSecurityManager() {
        return null;
    }
}
