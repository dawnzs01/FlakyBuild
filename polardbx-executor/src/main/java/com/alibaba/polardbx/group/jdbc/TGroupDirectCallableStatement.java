/*
 * Copyright [2013-2021], Alibaba Group Holding Limited
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.alibaba.polardbx.group.jdbc;

import java.io.InputStream;
import java.io.Reader;
import java.math.BigDecimal;
import java.net.URL;
import java.sql.Array;
import java.sql.Blob;
import java.sql.CallableStatement;
import java.sql.Clob;
import java.sql.Connection;
import java.sql.Date;
import java.sql.NClob;
import java.sql.ParameterMetaData;
import java.sql.Ref;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.RowId;
import java.sql.SQLException;
import java.sql.SQLType;
import java.sql.SQLWarning;
import java.sql.SQLXML;
import java.sql.Time;
import java.sql.Timestamp;
import java.util.Calendar;
import java.util.Map;

public class TGroupDirectCallableStatement extends TGroupDirectPreparedStatement implements CallableStatement {

    private final CallableStatement targetStatement;

    public TGroupDirectCallableStatement(TGroupDirectConnection tGroupConnection, CallableStatement stmt, String sql) {
        super(tGroupConnection, stmt, sql);
        this.targetStatement = stmt;
    }

    @Override
    public void addBatch() throws SQLException {
        targetStatement.addBatch();
    }

    @Override
    public void addBatch(String sql) throws SQLException {
        targetStatement.addBatch(sql);
    }

    @Override
    public void cancel() throws SQLException {
        targetStatement.cancel();
    }

    @Override
    public void clearBatch() throws SQLException {
        targetStatement.clearBatch();
    }

    @Override
    public void clearParameters() throws SQLException {
        targetStatement.clearParameters();
    }

    @Override
    public void clearWarnings() throws SQLException {
        targetStatement.clearWarnings();
    }

    @Override
    public void close() throws SQLException {
        targetStatement.close();
    }

    @Override
    public void closeOnCompletion() throws SQLException {
        targetStatement.closeOnCompletion();
    }

    @Override
    public boolean execute() throws SQLException {
        return targetStatement.execute();
    }

    @Override
    public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
        return targetStatement.execute(sql, autoGeneratedKeys);
    }

    @Override
    public boolean execute(String sql, int[] columnIndexes) throws SQLException {
        return targetStatement.execute(sql, columnIndexes);
    }

    @Override
    public boolean execute(String sql, String[] columnNames) throws SQLException {
        return targetStatement.execute(sql, columnNames);
    }

    @Override
    public boolean execute(String sql) throws SQLException {
        return targetStatement.execute(sql);
    }

    @Override
    public int[] executeBatch() throws SQLException {
        return targetStatement.executeBatch();
    }

    @Override
    public long[] executeLargeBatch() throws SQLException {
        return targetStatement.executeLargeBatch();
    }

    @Override
    public long executeLargeUpdate() throws SQLException {
        return targetStatement.executeLargeUpdate();
    }

    @Override
    public long executeLargeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
        return targetStatement.executeLargeUpdate(sql, autoGeneratedKeys);
    }

    @Override
    public long executeLargeUpdate(String sql, int[] columnIndexes) throws SQLException {
        return targetStatement.executeLargeUpdate(sql, columnIndexes);
    }

    @Override
    public long executeLargeUpdate(String sql, String[] columnNames) throws SQLException {
        return targetStatement.executeLargeUpdate(sql, columnNames);
    }

    @Override
    public long executeLargeUpdate(String sql) throws SQLException {
        return targetStatement.executeLargeUpdate(sql);
    }

    @Override
    public ResultSet executeQuery() throws SQLException {
        return targetStatement.executeQuery();
    }

    @Override
    public ResultSet executeQuery(String sql) throws SQLException {
        return targetStatement.executeQuery(sql);
    }

    @Override
    public int executeUpdate() throws SQLException {
        return targetStatement.executeUpdate();
    }

    @Override
    public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
        return targetStatement.executeUpdate(sql, autoGeneratedKeys);
    }

    @Override
    public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
        return targetStatement.executeUpdate(sql, columnIndexes);
    }

    @Override
    public int executeUpdate(String sql, String[] columnNames) throws SQLException {
        return targetStatement.executeUpdate(sql, columnNames);
    }

    @Override
    public int executeUpdate(String sql) throws SQLException {
        return targetStatement.executeUpdate(sql);
    }

    @Override
    public Array getArray(int arg0) throws SQLException {
        return targetStatement.getArray(arg0);
    }

    @Override
    public Array getArray(String arg0) throws SQLException {
        return targetStatement.getArray(arg0);
    }

    @Override
    public BigDecimal getBigDecimal(int arg0, int arg1) throws SQLException {
        return targetStatement.getBigDecimal(arg0, arg1);
    }

    @Override
    public BigDecimal getBigDecimal(int arg0) throws SQLException {
        return targetStatement.getBigDecimal(arg0);
    }

    @Override
    public BigDecimal getBigDecimal(String arg0) throws SQLException {
        return targetStatement.getBigDecimal(arg0);
    }

    @Override
    public Blob getBlob(int arg0) throws SQLException {
        return targetStatement.getBlob(arg0);
    }

    @Override
    public Blob getBlob(String arg0) throws SQLException {
        return targetStatement.getBlob(arg0);
    }

    @Override
    public boolean getBoolean(int arg0) throws SQLException {
        return targetStatement.getBoolean(arg0);
    }

    @Override
    public boolean getBoolean(String arg0) throws SQLException {
        return targetStatement.getBoolean(arg0);
    }

    @Override
    public byte getByte(int arg0) throws SQLException {
        return targetStatement.getByte(arg0);
    }

    @Override
    public byte getByte(String arg0) throws SQLException {
        return targetStatement.getByte(arg0);
    }

    @Override
    public byte[] getBytes(int arg0) throws SQLException {
        return targetStatement.getBytes(arg0);
    }

    @Override
    public byte[] getBytes(String arg0) throws SQLException {
        return targetStatement.getBytes(arg0);
    }

    @Override
    public Reader getCharacterStream(int arg0) throws SQLException {
        return targetStatement.getCharacterStream(arg0);
    }

    @Override
    public Reader getCharacterStream(String arg0) throws SQLException {
        return targetStatement.getCharacterStream(arg0);
    }

    @Override
    public Clob getClob(int arg0) throws SQLException {
        return targetStatement.getClob(arg0);
    }

    @Override
    public Clob getClob(String arg0) throws SQLException {
        return targetStatement.getClob(arg0);
    }

    @Override
    public Connection getConnection() throws SQLException {
        return targetStatement.getConnection();
    }

    @Override
    public Date getDate(int arg0, Calendar arg1) throws SQLException {
        return targetStatement.getDate(arg0, arg1);
    }

    @Override
    public Date getDate(int arg0) throws SQLException {
        return targetStatement.getDate(arg0);
    }

    @Override
    public Date getDate(String arg0, Calendar arg1) throws SQLException {
        return targetStatement.getDate(arg0, arg1);
    }

    @Override
    public Date getDate(String arg0) throws SQLException {
        return targetStatement.getDate(arg0);
    }

    @Override
    public double getDouble(int arg0) throws SQLException {
        return targetStatement.getDouble(arg0);
    }

    @Override
    public double getDouble(String arg0) throws SQLException {
        return targetStatement.getDouble(arg0);
    }

    @Override
    public int getFetchDirection() throws SQLException {
        return targetStatement.getFetchDirection();
    }

    @Override
    public int getFetchSize() throws SQLException {
        return targetStatement.getFetchSize();
    }

    @Override
    public float getFloat(int arg0) throws SQLException {
        return targetStatement.getFloat(arg0);
    }

    @Override
    public float getFloat(String arg0) throws SQLException {
        return targetStatement.getFloat(arg0);
    }

    @Override
    public ResultSet getGeneratedKeys() throws SQLException {
        return targetStatement.getGeneratedKeys();
    }

    @Override
    public int getInt(int arg0) throws SQLException {
        return targetStatement.getInt(arg0);
    }

    @Override
    public int getInt(String arg0) throws SQLException {
        return targetStatement.getInt(arg0);
    }

    @Override
    public long getLargeMaxRows() throws SQLException {
        return targetStatement.getLargeMaxRows();
    }

    @Override
    public long getLargeUpdateCount() throws SQLException {
        return targetStatement.getLargeUpdateCount();
    }

    @Override
    public long getLong(int arg0) throws SQLException {
        return targetStatement.getLong(arg0);
    }

    @Override
    public long getLong(String arg0) throws SQLException {
        return targetStatement.getLong(arg0);
    }

    @Override
    public int getMaxFieldSize() throws SQLException {
        return targetStatement.getMaxFieldSize();
    }

    @Override
    public int getMaxRows() throws SQLException {
        return targetStatement.getMaxRows();
    }

    @Override
    public ResultSetMetaData getMetaData() throws SQLException {
        return targetStatement.getMetaData();
    }

    @Override
    public boolean getMoreResults() throws SQLException {
        return targetStatement.getMoreResults();
    }

    @Override
    public boolean getMoreResults(int current) throws SQLException {
        return targetStatement.getMoreResults(current);
    }

    @Override
    public Reader getNCharacterStream(int arg0) throws SQLException {
        return targetStatement.getNCharacterStream(arg0);
    }

    @Override
    public Reader getNCharacterStream(String arg0) throws SQLException {
        return targetStatement.getNCharacterStream(arg0);
    }

    @Override
    public NClob getNClob(int arg0) throws SQLException {
        return targetStatement.getNClob(arg0);
    }

    @Override
    public NClob getNClob(String arg0) throws SQLException {
        return targetStatement.getNClob(arg0);
    }

    @Override
    public String getNString(int arg0) throws SQLException {
        return targetStatement.getNString(arg0);
    }

    @Override
    public String getNString(String arg0) throws SQLException {
        return targetStatement.getNString(arg0);
    }

    @Override
    public <T> T getObject(int arg0, Class<T> arg1) throws SQLException {
        return targetStatement.getObject(arg0, arg1);
    }

    @Override
    public Object getObject(int arg0, Map<String, Class<?>> arg1) throws SQLException {
        return targetStatement.getObject(arg0, arg1);
    }

    @Override
    public Object getObject(int arg0) throws SQLException {
        return targetStatement.getObject(arg0);
    }

    @Override
    public <T> T getObject(String arg0, Class<T> arg1) throws SQLException {
        return targetStatement.getObject(arg0, arg1);
    }

    @Override
    public Object getObject(String arg0, Map<String, Class<?>> arg1) throws SQLException {
        return targetStatement.getObject(arg0, arg1);
    }

    @Override
    public Object getObject(String arg0) throws SQLException {
        return targetStatement.getObject(arg0);
    }

    @Override
    public ParameterMetaData getParameterMetaData() throws SQLException {
        return targetStatement.getParameterMetaData();
    }

    @Override
    public int getQueryTimeout() throws SQLException {
        return targetStatement.getQueryTimeout();
    }

    @Override
    public Ref getRef(int arg0) throws SQLException {
        return targetStatement.getRef(arg0);
    }

    @Override
    public Ref getRef(String arg0) throws SQLException {
        return targetStatement.getRef(arg0);
    }

    @Override
    public ResultSet getResultSet() throws SQLException {
        return targetStatement.getResultSet();
    }

    @Override
    public int getResultSetConcurrency() throws SQLException {
        return targetStatement.getResultSetConcurrency();
    }

    @Override
    public int getResultSetHoldability() throws SQLException {
        return targetStatement.getResultSetHoldability();
    }

    @Override
    public int getResultSetType() throws SQLException {
        return targetStatement.getResultSetType();
    }

    @Override
    public RowId getRowId(int arg0) throws SQLException {
        return targetStatement.getRowId(arg0);
    }

    @Override
    public RowId getRowId(String arg0) throws SQLException {
        return targetStatement.getRowId(arg0);
    }

    @Override
    public SQLXML getSQLXML(int arg0) throws SQLException {
        return targetStatement.getSQLXML(arg0);
    }

    @Override
    public SQLXML getSQLXML(String arg0) throws SQLException {
        return targetStatement.getSQLXML(arg0);
    }

    @Override
    public short getShort(int arg0) throws SQLException {
        return targetStatement.getShort(arg0);
    }

    @Override
    public short getShort(String arg0) throws SQLException {
        return targetStatement.getShort(arg0);
    }

    @Override
    public String getString(int arg0) throws SQLException {
        return targetStatement.getString(arg0);
    }

    @Override
    public String getString(String arg0) throws SQLException {
        return targetStatement.getString(arg0);
    }

    @Override
    public Time getTime(int arg0, Calendar arg1) throws SQLException {
        return targetStatement.getTime(arg0, arg1);
    }

    @Override
    public Time getTime(int arg0) throws SQLException {
        return targetStatement.getTime(arg0);
    }

    @Override
    public Time getTime(String arg0, Calendar arg1) throws SQLException {
        return targetStatement.getTime(arg0, arg1);
    }

    @Override
    public Time getTime(String arg0) throws SQLException {
        return targetStatement.getTime(arg0);
    }

    @Override
    public Timestamp getTimestamp(int arg0, Calendar arg1) throws SQLException {
        return targetStatement.getTimestamp(arg0, arg1);
    }

    @Override
    public Timestamp getTimestamp(int arg0) throws SQLException {
        return targetStatement.getTimestamp(arg0);
    }

    @Override
    public Timestamp getTimestamp(String arg0, Calendar arg1) throws SQLException {
        return targetStatement.getTimestamp(arg0, arg1);
    }

    @Override
    public Timestamp getTimestamp(String arg0) throws SQLException {
        return targetStatement.getTimestamp(arg0);
    }

    @Override
    public URL getURL(int arg0) throws SQLException {
        return targetStatement.getURL(arg0);
    }

    @Override
    public URL getURL(String arg0) throws SQLException {
        return targetStatement.getURL(arg0);
    }

    @Override
    public int getUpdateCount() throws SQLException {
        return targetStatement.getUpdateCount();
    }

    @Override
    public SQLWarning getWarnings() throws SQLException {
        return targetStatement.getWarnings();
    }

    @Override
    public boolean isCloseOnCompletion() throws SQLException {
        return targetStatement.isCloseOnCompletion();
    }

    @Override
    public boolean isClosed() throws SQLException {
        return targetStatement.isClosed();
    }

    @Override
    public boolean isPoolable() throws SQLException {
        return targetStatement.isPoolable();
    }

    @Override
    public boolean isWrapperFor(Class<?> iface) throws SQLException {
        return targetStatement.isWrapperFor(iface);
    }

    @Override
    public void registerOutParameter(int arg0, int arg1, int arg2) throws SQLException {
        targetStatement.registerOutParameter(arg0, arg1, arg2);
    }

    @Override
    public void registerOutParameter(int arg0, int arg1, String arg2) throws SQLException {
        targetStatement.registerOutParameter(arg0, arg1, arg2);
    }

    @Override
    public void registerOutParameter(int arg0, int arg1) throws SQLException {
        targetStatement.registerOutParameter(arg0, arg1);
    }

    @Override
    public void registerOutParameter(int arg0, SQLType arg1, int arg2) throws SQLException {
        targetStatement.registerOutParameter(arg0, arg1, arg2);
    }

    @Override
    public void registerOutParameter(int arg0, SQLType arg1, String arg2) throws SQLException {
        targetStatement.registerOutParameter(arg0, arg1, arg2);
    }

    @Override
    public void registerOutParameter(int arg0, SQLType arg1) throws SQLException {
        targetStatement.registerOutParameter(arg0, arg1);
    }

    @Override
    public void registerOutParameter(String arg0, int arg1, int arg2) throws SQLException {
        targetStatement.registerOutParameter(arg0, arg1, arg2);
    }

    @Override
    public void registerOutParameter(String arg0, int arg1, String arg2) throws SQLException {
        targetStatement.registerOutParameter(arg0, arg1, arg2);
    }

    @Override
    public void registerOutParameter(String arg0, int arg1) throws SQLException {
        targetStatement.registerOutParameter(arg0, arg1);
    }

    @Override
    public void registerOutParameter(String arg0, SQLType arg1, int arg2) throws SQLException {
        targetStatement.registerOutParameter(arg0, arg1, arg2);
    }

    @Override
    public void registerOutParameter(String arg0, SQLType arg1, String arg2) throws SQLException {
        targetStatement.registerOutParameter(arg0, arg1, arg2);
    }

    @Override
    public void registerOutParameter(String arg0, SQLType arg1) throws SQLException {
        targetStatement.registerOutParameter(arg0, arg1);
    }

    @Override
    public void setArray(int parameterIndex, Array x) throws SQLException {
        targetStatement.setArray(parameterIndex, x);
    }

    @Override
    public void setAsciiStream(int parameterIndex, InputStream x, int length) throws SQLException {
        targetStatement.setAsciiStream(parameterIndex, x, length);
    }

    @Override
    public void setAsciiStream(int parameterIndex, InputStream x, long length) throws SQLException {
        targetStatement.setAsciiStream(parameterIndex, x, length);
    }

    @Override
    public void setAsciiStream(int parameterIndex, InputStream x) throws SQLException {
        targetStatement.setAsciiStream(parameterIndex, x);
    }

    @Override
    public void setAsciiStream(String arg0, InputStream arg1, int arg2) throws SQLException {
        targetStatement.setAsciiStream(arg0, arg1, arg2);
    }

    @Override
    public void setAsciiStream(String arg0, InputStream arg1, long arg2) throws SQLException {
        targetStatement.setAsciiStream(arg0, arg1, arg2);
    }

    @Override
    public void setAsciiStream(String arg0, InputStream arg1) throws SQLException {
        targetStatement.setAsciiStream(arg0, arg1);
    }

    @Override
    public void setBigDecimal(int parameterIndex, BigDecimal x) throws SQLException {
        targetStatement.setBigDecimal(parameterIndex, x);
    }

    @Override
    public void setBigDecimal(String arg0, BigDecimal arg1) throws SQLException {
        targetStatement.setBigDecimal(arg0, arg1);
    }

    @Override
    public void setBinaryStream(int parameterIndex, InputStream x, int length) throws SQLException {
        targetStatement.setBinaryStream(parameterIndex, x, length);
    }

    @Override
    public void setBinaryStream(int parameterIndex, InputStream x, long length) throws SQLException {
        targetStatement.setBinaryStream(parameterIndex, x, length);
    }

    @Override
    public void setBinaryStream(int parameterIndex, InputStream x) throws SQLException {
        targetStatement.setBinaryStream(parameterIndex, x);
    }

    @Override
    public void setBinaryStream(String arg0, InputStream arg1, int arg2) throws SQLException {
        targetStatement.setBinaryStream(arg0, arg1, arg2);
    }

    @Override
    public void setBinaryStream(String arg0, InputStream arg1, long arg2) throws SQLException {
        targetStatement.setBinaryStream(arg0, arg1, arg2);
    }

    @Override
    public void setBinaryStream(String arg0, InputStream arg1) throws SQLException {
        targetStatement.setBinaryStream(arg0, arg1);
    }

    @Override
    public void setBlob(int parameterIndex, Blob x) throws SQLException {
        targetStatement.setBlob(parameterIndex, x);
    }

    @Override
    public void setBlob(int parameterIndex, InputStream inputStream, long length) throws SQLException {
        targetStatement.setBlob(parameterIndex, inputStream, length);
    }

    @Override
    public void setBlob(int parameterIndex, InputStream inputStream) throws SQLException {
        targetStatement.setBlob(parameterIndex, inputStream);
    }

    @Override
    public void setBlob(String arg0, Blob arg1) throws SQLException {
        targetStatement.setBlob(arg0, arg1);
    }

    @Override
    public void setBlob(String arg0, InputStream arg1, long arg2) throws SQLException {
        targetStatement.setBlob(arg0, arg1, arg2);
    }

    @Override
    public void setBlob(String arg0, InputStream arg1) throws SQLException {
        targetStatement.setBlob(arg0, arg1);
    }

    @Override
    public void setBoolean(int parameterIndex, boolean x) throws SQLException {
        targetStatement.setBoolean(parameterIndex, x);
    }

    @Override
    public void setBoolean(String arg0, boolean arg1) throws SQLException {
        targetStatement.setBoolean(arg0, arg1);
    }

    @Override
    public void setByte(int parameterIndex, byte x) throws SQLException {
        targetStatement.setByte(parameterIndex, x);
    }

    @Override
    public void setByte(String arg0, byte arg1) throws SQLException {
        targetStatement.setByte(arg0, arg1);
    }

    @Override
    public void setBytes(int parameterIndex, byte[] x) throws SQLException {
        targetStatement.setBytes(parameterIndex, x);
    }

    @Override
    public void setBytes(String arg0, byte[] arg1) throws SQLException {
        targetStatement.setBytes(arg0, arg1);
    }

    @Override
    public void setCharacterStream(int parameterIndex, Reader reader, int length) throws SQLException {
        targetStatement.setCharacterStream(parameterIndex, reader, length);
    }

    @Override
    public void setCharacterStream(int parameterIndex, Reader reader, long length) throws SQLException {
        targetStatement.setCharacterStream(parameterIndex, reader, length);
    }

    @Override
    public void setCharacterStream(int parameterIndex, Reader reader) throws SQLException {
        targetStatement.setCharacterStream(parameterIndex, reader);
    }

    @Override
    public void setCharacterStream(String arg0, Reader arg1, int arg2) throws SQLException {
        targetStatement.setCharacterStream(arg0, arg1, arg2);
    }

    @Override
    public void setCharacterStream(String arg0, Reader arg1, long arg2) throws SQLException {
        targetStatement.setCharacterStream(arg0, arg1, arg2);
    }

    @Override
    public void setCharacterStream(String arg0, Reader arg1) throws SQLException {
        targetStatement.setCharacterStream(arg0, arg1);
    }

    @Override
    public void setClob(int parameterIndex, Clob x) throws SQLException {
        targetStatement.setClob(parameterIndex, x);
    }

    @Override
    public void setClob(int parameterIndex, Reader reader, long length) throws SQLException {
        targetStatement.setClob(parameterIndex, reader, length);
    }

    @Override
    public void setClob(int parameterIndex, Reader reader) throws SQLException {
        targetStatement.setClob(parameterIndex, reader);
    }

    @Override
    public void setClob(String arg0, Clob arg1) throws SQLException {
        targetStatement.setClob(arg0, arg1);
    }

    @Override
    public void setClob(String arg0, Reader arg1, long arg2) throws SQLException {
        targetStatement.setClob(arg0, arg1, arg2);
    }

    @Override
    public void setClob(String arg0, Reader arg1) throws SQLException {
        targetStatement.setClob(arg0, arg1);
    }

    @Override
    public void setCursorName(String name) throws SQLException {
        targetStatement.setCursorName(name);
    }

    @Override
    public void setDate(int parameterIndex, Date x, Calendar cal) throws SQLException {
        targetStatement.setDate(parameterIndex, x, cal);
    }

    @Override
    public void setDate(int parameterIndex, Date x) throws SQLException {
        targetStatement.setDate(parameterIndex, x);
    }

    @Override
    public void setDate(String arg0, Date arg1, Calendar arg2) throws SQLException {
        targetStatement.setDate(arg0, arg1, arg2);
    }

    @Override
    public void setDate(String arg0, Date arg1) throws SQLException {
        targetStatement.setDate(arg0, arg1);
    }

    @Override
    public void setDouble(int parameterIndex, double x) throws SQLException {
        targetStatement.setDouble(parameterIndex, x);
    }

    @Override
    public void setDouble(String arg0, double arg1) throws SQLException {
        targetStatement.setDouble(arg0, arg1);
    }

    @Override
    public void setEscapeProcessing(boolean enable) throws SQLException {
        targetStatement.setEscapeProcessing(enable);
    }

    @Override
    public void setFetchDirection(int direction) throws SQLException {
        targetStatement.setFetchDirection(direction);
    }

    @Override
    public void setFetchSize(int rows) throws SQLException {
        targetStatement.setFetchSize(rows);
    }

    @Override
    public void setFloat(int parameterIndex, float x) throws SQLException {
        targetStatement.setFloat(parameterIndex, x);
    }

    @Override
    public void setFloat(String arg0, float arg1) throws SQLException {
        targetStatement.setFloat(arg0, arg1);
    }

    @Override
    public void setInt(int parameterIndex, int x) throws SQLException {
        targetStatement.setInt(parameterIndex, x);
    }

    @Override
    public void setInt(String arg0, int arg1) throws SQLException {
        targetStatement.setInt(arg0, arg1);
    }

    @Override
    public void setLargeMaxRows(long max) throws SQLException {
        targetStatement.setLargeMaxRows(max);
    }

    @Override
    public void setLong(int parameterIndex, long x) throws SQLException {
        targetStatement.setLong(parameterIndex, x);
    }

    @Override
    public void setLong(String arg0, long arg1) throws SQLException {
        targetStatement.setLong(arg0, arg1);
    }

    @Override
    public void setMaxFieldSize(int max) throws SQLException {
        targetStatement.setMaxFieldSize(max);
    }

    @Override
    public void setMaxRows(int max) throws SQLException {
        targetStatement.setMaxRows(max);
    }

    @Override
    public void setNCharacterStream(int parameterIndex, Reader value, long length) throws SQLException {
        targetStatement.setNCharacterStream(parameterIndex, value, length);
    }

    @Override
    public void setNCharacterStream(int parameterIndex, Reader value) throws SQLException {
        targetStatement.setNCharacterStream(parameterIndex, value);
    }

    @Override
    public void setNCharacterStream(String arg0, Reader arg1, long arg2) throws SQLException {
        targetStatement.setNCharacterStream(arg0, arg1, arg2);
    }

    @Override
    public void setNCharacterStream(String arg0, Reader arg1) throws SQLException {
        targetStatement.setNCharacterStream(arg0, arg1);
    }

    @Override
    public void setNClob(int parameterIndex, NClob value) throws SQLException {
        targetStatement.setNClob(parameterIndex, value);
    }

    @Override
    public void setNClob(int parameterIndex, Reader reader, long length) throws SQLException {
        targetStatement.setNClob(parameterIndex, reader, length);
    }

    @Override
    public void setNClob(int parameterIndex, Reader reader) throws SQLException {
        targetStatement.setNClob(parameterIndex, reader);
    }

    @Override
    public void setNClob(String arg0, NClob arg1) throws SQLException {
        targetStatement.setNClob(arg0, arg1);
    }

    @Override
    public void setNClob(String arg0, Reader arg1, long arg2) throws SQLException {
        targetStatement.setNClob(arg0, arg1, arg2);
    }

    @Override
    public void setNClob(String arg0, Reader arg1) throws SQLException {
        targetStatement.setNClob(arg0, arg1);
    }

    @Override
    public void setNString(int parameterIndex, String value) throws SQLException {
        targetStatement.setNString(parameterIndex, value);
    }

    @Override
    public void setNString(String arg0, String arg1) throws SQLException {
        targetStatement.setNString(arg0, arg1);
    }

    @Override
    public void setNull(int parameterIndex, int sqlType, String typeName) throws SQLException {
        targetStatement.setNull(parameterIndex, sqlType, typeName);
    }

    @Override
    public void setNull(int parameterIndex, int sqlType) throws SQLException {
        targetStatement.setNull(parameterIndex, sqlType);
    }

    @Override
    public void setNull(String arg0, int arg1, String arg2) throws SQLException {
        targetStatement.setNull(arg0, arg1, arg2);
    }

    @Override
    public void setNull(String arg0, int arg1) throws SQLException {
        targetStatement.setNull(arg0, arg1);
    }

    @Override
    public void setObject(int parameterIndex, Object x, int targetSqlType, int scaleOrLength) throws SQLException {
        targetStatement.setObject(parameterIndex, x, targetSqlType, scaleOrLength);
    }

    @Override
    public void setObject(int parameterIndex, Object x, int targetSqlType) throws SQLException {
        targetStatement.setObject(parameterIndex, x, targetSqlType);
    }

    @Override
    public void setObject(int parameterIndex, Object x, SQLType targetSqlType, int scaleOrLength) throws SQLException {
        targetStatement.setObject(parameterIndex, x, targetSqlType, scaleOrLength);
    }

    @Override
    public void setObject(int parameterIndex, Object x, SQLType targetSqlType) throws SQLException {
        targetStatement.setObject(parameterIndex, x, targetSqlType);
    }

    @Override
    public void setObject(int parameterIndex, Object x) throws SQLException {
        targetStatement.setObject(parameterIndex, x);
    }

    @Override
    public void setObject(String arg0, Object arg1, int arg2, int arg3) throws SQLException {
        targetStatement.setObject(arg0, arg1, arg2, arg3);
    }

    @Override
    public void setObject(String arg0, Object arg1, int arg2) throws SQLException {
        targetStatement.setObject(arg0, arg1, arg2);
    }

    @Override
    public void setObject(String arg0, Object arg1, SQLType arg2, int arg3) throws SQLException {
        targetStatement.setObject(arg0, arg1, arg2, arg3);
    }

    @Override
    public void setObject(String arg0, Object arg1, SQLType arg2) throws SQLException {
        targetStatement.setObject(arg0, arg1, arg2);
    }

    @Override
    public void setObject(String arg0, Object arg1) throws SQLException {
        targetStatement.setObject(arg0, arg1);
    }

    @Override
    public void setPoolable(boolean poolable) throws SQLException {
        targetStatement.setPoolable(poolable);
    }

    @Override
    public void setQueryTimeout(int seconds) throws SQLException {
        targetStatement.setQueryTimeout(seconds);
    }

    @Override
    public void setRef(int parameterIndex, Ref x) throws SQLException {
        targetStatement.setRef(parameterIndex, x);
    }

    @Override
    public void setRowId(int parameterIndex, RowId x) throws SQLException {
        targetStatement.setRowId(parameterIndex, x);
    }

    @Override
    public void setRowId(String arg0, RowId arg1) throws SQLException {
        targetStatement.setRowId(arg0, arg1);
    }

    @Override
    public void setSQLXML(int parameterIndex, SQLXML xmlObject) throws SQLException {
        targetStatement.setSQLXML(parameterIndex, xmlObject);
    }

    @Override
    public void setSQLXML(String arg0, SQLXML arg1) throws SQLException {
        targetStatement.setSQLXML(arg0, arg1);
    }

    @Override
    public void setShort(int parameterIndex, short x) throws SQLException {
        targetStatement.setShort(parameterIndex, x);
    }

    @Override
    public void setShort(String arg0, short arg1) throws SQLException {
        targetStatement.setShort(arg0, arg1);
    }

    @Override
    public void setString(int parameterIndex, String x) throws SQLException {
        targetStatement.setString(parameterIndex, x);
    }

    @Override
    public void setString(String arg0, String arg1) throws SQLException {
        targetStatement.setString(arg0, arg1);
    }

    @Override
    public void setTime(int parameterIndex, Time x, Calendar cal) throws SQLException {
        targetStatement.setTime(parameterIndex, x, cal);
    }

    @Override
    public void setTime(int parameterIndex, Time x) throws SQLException {
        targetStatement.setTime(parameterIndex, x);
    }

    @Override
    public void setTime(String arg0, Time arg1, Calendar arg2) throws SQLException {
        targetStatement.setTime(arg0, arg1, arg2);
    }

    @Override
    public void setTime(String arg0, Time arg1) throws SQLException {
        targetStatement.setTime(arg0, arg1);
    }

    @Override
    public void setTimestamp(int parameterIndex, Timestamp x, Calendar cal) throws SQLException {
        targetStatement.setTimestamp(parameterIndex, x, cal);
    }

    @Override
    public void setTimestamp(int parameterIndex, Timestamp x) throws SQLException {
        targetStatement.setTimestamp(parameterIndex, x);
    }

    @Override
    public void setTimestamp(String arg0, Timestamp arg1, Calendar arg2) throws SQLException {
        targetStatement.setTimestamp(arg0, arg1, arg2);
    }

    @Override
    public void setTimestamp(String arg0, Timestamp arg1) throws SQLException {
        targetStatement.setTimestamp(arg0, arg1);
    }

    @Override
    public void setURL(int parameterIndex, URL x) throws SQLException {
        targetStatement.setURL(parameterIndex, x);
    }

    @Override
    public void setURL(String arg0, URL arg1) throws SQLException {
        targetStatement.setURL(arg0, arg1);
    }

    @Override
    public void setUnicodeStream(int parameterIndex, InputStream x, int length) throws SQLException {
        targetStatement.setUnicodeStream(parameterIndex, x, length);
    }

    @Override
    public <T> T unwrap(Class<T> iface) throws SQLException {
        return targetStatement.unwrap(iface);
    }

    @Override
    public boolean wasNull() throws SQLException {
        return targetStatement.wasNull();
    }

}
